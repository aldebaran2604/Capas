//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SwitchDataBaseWebService
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DBComercio : DbContext
    {
        public DBComercio()
            : base("name=DBComercio")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Article> Articles { get; set; }
    
        public virtual ObjectResult<Nullable<decimal>> AddArticle(string description, Nullable<decimal> price, Nullable<decimal> stock)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddArticle", descriptionParameter, priceParameter, stockParameter);
        }
    
        public virtual ObjectResult<ShowAll_Result> ShowAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShowAll_Result>("ShowAll");
        }
    
        public virtual ObjectResult<Article> ShowAll1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Article>("ShowAll1");
        }
    
        public virtual ObjectResult<Article> ShowAll1(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Article>("ShowAll1", mergeOption);
        }
    
        public virtual ObjectResult<Nullable<decimal>> AddArticle1(string description, Nullable<decimal> price, Nullable<decimal> stock)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("AddArticle1", descriptionParameter, priceParameter, stockParameter);
        }
    
        public virtual int EditArticle(Nullable<int> id, string description, Nullable<decimal> price, Nullable<decimal> stock)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(decimal));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("Stock", stock) :
                new ObjectParameter("Stock", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditArticle", idParameter, descriptionParameter, priceParameter, stockParameter);
        }
    }
}
